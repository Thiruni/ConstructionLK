@model IEnumerable<ConstructionLK.Models.ItemRequest>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 400px;
        width: 600px;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>
<br/><br/>
<div class="row">
    <div id="map"></div>
    <script>
        var map;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 6.927079, lng: 79.861243 },
                zoom: 15
            });
            var marker = new google.maps.Marker({
                position: { lat: 6.927079, lng: 79.861243 },
                map: map
            });
            var contentString = '<div id="content">' +
                '<div id="siteNotice">' +
                '</div>' +
                '<h1 id="firstHeading" class="firstHeading">Location</h1>' +
                '<div id="bodyContent">' +
                '<p><b>Location</b></p>' +
                '</div>' +
                '</div>';
            var infowindow = new google.maps.InfoWindow({
                content: contentString
            });
            marker.addListener('mouseover', function () {
                infowindow.open(map, marker);
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNAhDrUVY2eAjlZHN_P1C1msEA_45v-XY&callback=initMap"
            async defer></script>
</div>
<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Customer.Username)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Item.ItemName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Location.Type)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ServiceProvider.Username)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Message)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreatedDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AcceptedDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ExpDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CompletedDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Status)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Customer.Username)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Item.ItemName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Location.Type)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ServiceProvider.Username)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Message)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CreatedDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.AcceptedDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ExpDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CompletedDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Status)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>
    </tr>
}

</table>
